SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[sp_GetEventCycles]        @StartDate DATETIME,    @EndDate DATETIME,	@Person_Id INT,	@Org_Id INTASBEGIN    WITH FilteredEvents AS (        SELECT             Id,             Event_Id,             Event_Record_Id,             Person_Id,             Login_Date_Time,			Status,  -- Include Status            LAG(Event_Id) OVER (ORDER BY Event_Record_Id) AS Prev_Event_Id,            LAG(Login_Date_Time) OVER (ORDER BY Event_Record_Id) AS Prev_Login_Date_Time        FROM             Window_Events_Logs        WHERE             Person_Id = @Person_Id			AND Org_Id = @Org_Id            AND Login_Date_Time >= @StartDate            AND Login_Date_Time <= @EndDate    ),    FilteredCycles AS (        SELECT             Id,             Event_Id,             Event_Record_Id,             Person_Id,             Login_Date_Time,			Status,  -- Include Status            Prev_Event_Id,            Prev_Login_Date_Time,            CASE                 WHEN Event_Id IN (4800, 4802) AND (Prev_Event_Id IS NULL OR Prev_Event_Id NOT IN (4800, 4802, 4803)) THEN 1                WHEN Event_Id = 4801 AND (Prev_Event_Id IN (4800, 4802) OR EXISTS (                    SELECT 1                     FROM FilteredEvents fe                     WHERE fe.Event_Id IN (4800, 4802)                     AND fe.Event_Record_Id < FilteredEvents.Event_Record_Id                     AND fe.Event_Record_Id > ISNULL((                        SELECT MAX(Event_Record_Id)                         FROM FilteredEvents fe2                         WHERE fe2.Event_Id = 4801                         AND fe2.Event_Record_Id < FilteredEvents.Event_Record_Id                    ), 0)                )) THEN 2                ELSE 0            END AS CycleType        FROM             FilteredEvents    ),    CycleStartEnd AS (        SELECT             Id,             Event_Id,             Event_Record_Id,             Person_Id,             Login_Date_Time,			Status,  -- Include Status            CycleType,            LEAD(Login_Date_Time) OVER (ORDER BY Event_Record_Id) AS Next_Login_Date_Time        FROM             FilteredCycles        WHERE             CycleType IN (1, 2)    ),    FilteredCyclePairs AS (        SELECT             StartEvent.Login_Date_Time AS Start_Time,            StartEvent.Event_Id AS Start_Event_Id,            EndEvent.Login_Date_Time AS End_Time,			EndEvent.Status AS End_Event_Status,  -- Include EndEvent Status            DATEDIFF(SECOND, StartEvent.Login_Date_Time, EndEvent.Login_Date_Time) AS Time_Difference_Seconds,            ROW_NUMBER() OVER (PARTITION BY StartEvent.Login_Date_Time ORDER BY EndEvent.Login_Date_Time) AS rn        FROM             CycleStartEnd AS StartEvent        JOIN             CycleStartEnd AS EndEvent        ON             StartEvent.CycleType = 1             AND EndEvent.CycleType = 2             AND StartEvent.Event_Record_Id < EndEvent.Event_Record_Id    )    SELECT         fc.Start_Time,        fc.Start_Event_Id,        we.EventInvokType AS EventInvokType,        fc.End_Time,		fc.End_Event_Status,  -- Select End_Status        --CONVERT(TIME, DATEADD(SECOND, fc.Time_Difference_Seconds, 0)) AS Time_Difference		CONVERT(VARCHAR, CONVERT(TIME, DATEADD(SECOND, fc.Time_Difference_Seconds, 0)), 108) AS Time_Difference    FROM         FilteredCyclePairs fc    JOIN         MasterTable.Window_Events we    ON         fc.Start_Event_Id = we.Event_Id    WHERE         fc.rn = 1    ORDER BY         fc.Start_Time;END
GO